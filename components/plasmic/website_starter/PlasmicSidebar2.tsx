/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: awWXPZrL2SGbXBM6Se5zHf
// Component: YtHXSzZm_A-s

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: awWXPZrL2SGbXBM6Se5zHf/projectcss
import sty from "./PlasmicSidebar2.module.css"; // plasmic-import: YtHXSzZm_A-s/css

import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: C9hfSSDCPUtk/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: WfOpdRqASCyF/icon

createPlasmicElementProxy;

export type PlasmicSidebar2__VariantMembers = {
  collapsed: "collapsed";
  expanded: "expanded";
};
export type PlasmicSidebar2__VariantsArgs = {
  collapsed?: SingleBooleanChoiceArg<"collapsed">;
  expanded?: SingleBooleanChoiceArg<"expanded">;
};
type VariantPropType = keyof PlasmicSidebar2__VariantsArgs;
export const PlasmicSidebar2__VariantProps = new Array<VariantPropType>(
  "collapsed",
  "expanded"
);

export type PlasmicSidebar2__ArgsType = {};
type ArgPropType = keyof PlasmicSidebar2__ArgsType;
export const PlasmicSidebar2__ArgProps = new Array<ArgPropType>();

export type PlasmicSidebar2__OverridesType = {
  root?: Flex__<"div">;
  defhj?: Flex__<"button">;
  fwefgr?: Flex__<"button">;
  dbfbfdb?: Flex__<"button">;
  freeBox?: Flex__<"div">;
};

export interface DefaultSidebar2Props {
  collapsed?: SingleBooleanChoiceArg<"collapsed">;
  expanded?: SingleBooleanChoiceArg<"expanded">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSidebar2__RenderFunc(props: {
  variants: PlasmicSidebar2__VariantsArgs;
  args: PlasmicSidebar2__ArgsType;
  overrides: PlasmicSidebar2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "expanded",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.expanded
      },
      {
        path: "collapsed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.collapsed
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        (() => {
          try {
            return undefined;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return ``;
            }
            throw e;
          }
        })(),
        { [sty.rootexpanded]: hasVariant($state, "expanded", "expanded") }
      )}
    >
      <ChevronDownIcon
        className={classNames(projectcss.all, sty.svg__u6TqF, {
          [sty.svgexpanded__u6TqFvf8OZ]: hasVariant(
            $state,
            "expanded",
            "expanded"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateExpanded"] = true
            ? (() => {
                const actionArgs = { vgroup: "expanded", operation: 2 };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  const oldValue = $stateGet($state, vgroup);
                  $stateSet($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateExpanded"] != null &&
            typeof $steps["updateExpanded"] === "object" &&
            typeof $steps["updateExpanded"].then === "function"
          ) {
            $steps["updateExpanded"] = await $steps["updateExpanded"];
          }
        }}
        role={"img"}
      />

      <Stack__
        as={"button"}
        data-plasmic-name={"defhj"}
        data-plasmic-override={overrides.defhj}
        hasGap={true}
        className={classNames(projectcss.all, projectcss.button, sty.defhj, {
          [sty.defhjexpanded]: hasVariant($state, "expanded", "expanded")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["goToNewPage"] = true
            ? (() => {
                const actionArgs = { destination: `/new-page` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToNewPage"] != null &&
            typeof $steps["goToNewPage"] === "object" &&
            typeof $steps["goToNewPage"].then === "function"
          ) {
            $steps["goToNewPage"] = await $steps["goToNewPage"];
          }
        }}
        ref={ref => {
          $refs["defhj"] = ref;
        }}
      >
        <CircleIcon
          className={classNames(projectcss.all, sty.svg__iOrbQ, {
            [sty.svgexpanded__iOrbQvf8OZ]: hasVariant(
              $state,
              "expanded",
              "expanded"
            )
          })}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__xUh2,
            {
              [sty.textexpanded__xUh2Vf8OZ]: hasVariant(
                $state,
                "expanded",
                "expanded"
              )
            }
          )}
        >
          {"Menu item 1"}
        </div>
      </Stack__>
      <Stack__
        as={"button"}
        data-plasmic-name={"fwefgr"}
        data-plasmic-override={overrides.fwefgr}
        hasGap={true}
        className={classNames(projectcss.all, projectcss.button, sty.fwefgr, {
          [sty.fwefgrexpanded]: hasVariant($state, "expanded", "expanded")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["goToNewPage2"] = true
            ? (() => {
                const actionArgs = { destination: `/new-page-2` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToNewPage2"] != null &&
            typeof $steps["goToNewPage2"] === "object" &&
            typeof $steps["goToNewPage2"].then === "function"
          ) {
            $steps["goToNewPage2"] = await $steps["goToNewPage2"];
          }
        }}
        ref={ref => {
          $refs["fwefgr"] = ref;
        }}
      >
        <CircleIcon
          className={classNames(projectcss.all, sty.svg___7E3Cu, {
            [sty.svgexpanded___7E3Cuvf8OZ]: hasVariant(
              $state,
              "expanded",
              "expanded"
            )
          })}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__xqoe6,
            {
              [sty.textexpanded__xqoe6Vf8OZ]: hasVariant(
                $state,
                "expanded",
                "expanded"
              )
            }
          )}
        >
          {"Menu item 1"}
        </div>
      </Stack__>
      <Stack__
        as={"button"}
        data-plasmic-name={"dbfbfdb"}
        data-plasmic-override={overrides.dbfbfdb}
        hasGap={true}
        className={classNames(projectcss.all, projectcss.button, sty.dbfbfdb, {
          [sty.dbfbfdbexpanded]: hasVariant($state, "expanded", "expanded")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["goToNewPage3"] = true
            ? (() => {
                const actionArgs = { destination: `/new-page-3` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToNewPage3"] != null &&
            typeof $steps["goToNewPage3"] === "object" &&
            typeof $steps["goToNewPage3"].then === "function"
          ) {
            $steps["goToNewPage3"] = await $steps["goToNewPage3"];
          }
        }}
        ref={ref => {
          $refs["dbfbfdb"] = ref;
        }}
      >
        <CircleIcon
          className={classNames(projectcss.all, sty.svg__ep05, {
            [sty.svgexpanded__ep05Vf8OZ]: hasVariant(
              $state,
              "expanded",
              "expanded"
            )
          })}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__hyKzI,
            {
              [sty.textexpanded__hyKzIvf8OZ]: hasVariant(
                $state,
                "expanded",
                "expanded"
              )
            }
          )}
        >
          {"Menu item 1"}
        </div>
      </Stack__>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxexpanded]: hasVariant($state, "expanded", "expanded")
        })}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "defhj", "fwefgr", "dbfbfdb", "freeBox"],
  defhj: ["defhj"],
  fwefgr: ["fwefgr"],
  dbfbfdb: ["dbfbfdb"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  defhj: "button";
  fwefgr: "button";
  dbfbfdb: "button";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebar2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebar2__VariantsArgs;
    args?: PlasmicSidebar2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSidebar2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSidebar2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSidebar2__ArgProps,
          internalVariantPropNames: PlasmicSidebar2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSidebar2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSidebar2";
  } else {
    func.displayName = `PlasmicSidebar2.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebar2 = Object.assign(
  // Top-level PlasmicSidebar2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    defhj: makeNodeComponent("defhj"),
    fwefgr: makeNodeComponent("fwefgr"),
    dbfbfdb: makeNodeComponent("dbfbfdb"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicSidebar2
    internalVariantProps: PlasmicSidebar2__VariantProps,
    internalArgProps: PlasmicSidebar2__ArgProps
  }
);

export default PlasmicSidebar2;
/* prettier-ignore-end */
